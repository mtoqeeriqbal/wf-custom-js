{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/finsweet.ts", "../src/utils/resetFilters.ts", "../src/utils/simplemap.ts", "../src/utils/states.ts", "../src/utils/syncInputsAndSelects.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Initializes Finsweet Attributes and defines the global filterByState function.\n */\n\n// Extend the Window interface to include FinsweetAttributes and filterByState\ndeclare global {\n  interface Window {\n    FinsweetAttributes: [string, () => void][];\n    filterByState?: (stateValue: string) => void;\n  }\n}\n\nexport const initializeFinsweetAttributes = () => {\n  window.FinsweetAttributes ||= [];\n\n  window.FinsweetAttributes.push([\n    'list',\n    () => {\n      // Define the global function\n      window.filterByState = function (stateValue: string) {\n        const dropdowns = document.querySelectorAll(\n          '[fs-list-field=\"state\"]'\n        ) as NodeListOf<HTMLSelectElement>;\n\n        if (!dropdowns || dropdowns.length === 0) {\n          return;\n        }\n\n        dropdowns.forEach((dropdown) => {\n          // Set value for each dropdown\n          dropdown.value = stateValue;\n\n          // Trigger Finsweet filters\n          dropdown.dispatchEvent(new Event('input', { bubbles: true }));\n          dropdown.dispatchEvent(new Event('change', { bubbles: true }));\n        });\n      };\n    },\n  ]);\n};\n", "/**\n * Resets the filters and handles the SimplyMap back button event.\n */\nexport const resetFilters = () => {\n  // Attach the SimplyMap back button event\n  simplemaps_usmap.hooks.back = function () {\n    const resetButton = document.getElementById('programmatic-reset'); // Your hidden reset button ID\n    if (resetButton) {\n      resetButton.click();\n    } else {\n      console.warn('Reset button not found!');\n    }\n  };\n};\n", "/**\n * Extends the Window interface to include the filterByState property.\n */\ndeclare global {\n  interface Window {\n    filterByState?: (stateName: string) => void;\n  }\n}\n\n/**\n * Initializes the SimpleMap hook for zoomable click state functionality.\n */\n// Ensure simplemaps_usmap is declared or imported\ndeclare const simplemaps_usmap: {\n  hooks: {\n    zoomable_click_state: (id: string) => boolean;\n  };\n};\n\nexport const initializeSimpleMap = () => {\n  simplemaps_usmap.hooks.zoomable_click_state = function (id: string) {\n    // Use the state ID as the abbreviation\n    const stateAbbreviation = id;\n\n    if (window.filterByState) {\n      window.filterByState(stateAbbreviation); // Call the global filter function\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('filterByState function is not defined');\n    }\n\n    return true;\n  };\n};\n", "/**\n * List of all US states.\n */\nexport const states = [\n  { name: 'Alabama', abbreviation: 'AL' },\n  { name: 'Alaska', abbreviation: 'AK' },\n  { name: 'Arizona', abbreviation: 'AZ' },\n  { name: 'Arkansas', abbreviation: 'AR' },\n  { name: 'California', abbreviation: 'CA' },\n  { name: 'Colorado', abbreviation: 'CO' },\n  { name: 'Connecticut', abbreviation: 'CT' },\n  { name: 'Delaware', abbreviation: 'DE' },\n  { name: 'Florida', abbreviation: 'FL' },\n  { name: 'Georgia', abbreviation: 'GA' },\n  { name: 'Hawaii', abbreviation: 'HI' },\n  { name: 'Idaho', abbreviation: 'ID' },\n  { name: 'Illinois', abbreviation: 'IL' },\n  { name: 'Indiana', abbreviation: 'IN' },\n  { name: 'Iowa', abbreviation: 'IA' },\n  { name: 'Kansas', abbreviation: 'KS' },\n  { name: 'Kentucky', abbreviation: 'KY' },\n  { name: 'Louisiana', abbreviation: 'LA' },\n  { name: 'Maine', abbreviation: 'ME' },\n  { name: 'Maryland', abbreviation: 'MD' },\n  { name: 'Massachusetts', abbreviation: 'MA' },\n  { name: 'Michigan', abbreviation: 'MI' },\n  { name: 'Minnesota', abbreviation: 'MN' },\n  { name: 'Mississippi', abbreviation: 'MS' },\n  { name: 'Missouri', abbreviation: 'MO' },\n  { name: 'Montana', abbreviation: 'MT' },\n  { name: 'Nebraska', abbreviation: 'NE' },\n  { name: 'Nevada', abbreviation: 'NV' },\n  { name: 'New Hampshire', abbreviation: 'NH' },\n  { name: 'New Jersey', abbreviation: 'NJ' },\n  { name: 'New Mexico', abbreviation: 'NM' },\n  { name: 'New York', abbreviation: 'NY' },\n  { name: 'North Carolina', abbreviation: 'NC' },\n  { name: 'North Dakota', abbreviation: 'ND' },\n  { name: 'Ohio', abbreviation: 'OH' },\n  { name: 'Oklahoma', abbreviation: 'OK' },\n  { name: 'Oregon', abbreviation: 'OR' },\n  { name: 'Pennsylvania', abbreviation: 'PA' },\n  { name: 'Rhode Island', abbreviation: 'RI' },\n  { name: 'South Carolina', abbreviation: 'SC' },\n  { name: 'South Dakota', abbreviation: 'SD' },\n  { name: 'Tennessee', abbreviation: 'TN' },\n  { name: 'Texas', abbreviation: 'TX' },\n  { name: 'Utah', abbreviation: 'UT' },\n  { name: 'Vermont', abbreviation: 'VT' },\n  { name: 'Virginia', abbreviation: 'VA' },\n  { name: 'Washington', abbreviation: 'WA' },\n  { name: 'West Virginia', abbreviation: 'WV' },\n  { name: 'Wisconsin', abbreviation: 'WI' },\n  { name: 'Wyoming', abbreviation: 'WY' },\n];\n\n/**\n * Populates a dropdown with US states.\n */\nexport const populateStateDropdown = () => {\n  const dropdowns = document.querySelectorAll<HTMLSelectElement>(\n    'select[data-name=\"State\"], select#state-dropdown, select.state-dropdown, select[data=\"states\"]'\n  );\n\n  if (dropdowns.length === 0) {\n    return;\n  }\n\n  dropdowns.forEach((dropdown) => {\n    // Remove all options except the first one (usually a placeholder)\n    while (dropdown.options.length > 1) {\n      dropdown.remove(1);\n    }\n\n    states.forEach((state) => {\n      // Create a new option with the state's abbreviation as the value and the full name as the text\n      const option = new Option(state.name, state.abbreviation);\n      dropdown.add(option);\n    });\n  });\n};\n", "/**\n * Synchronizes the values of inputs and selects with specific attributes.\n */\nexport const syncInputsAndSelects = () => {\n  let isSyncingInput = false;\n  let isSyncingSelect = false;\n\n  const inputs = document.querySelectorAll<HTMLInputElement>('input[fs-list-field=\"*\"]');\n  const selects = document.querySelectorAll<HTMLSelectElement>('select[fs-list-field=\"state\"]');\n\n  // Sync input fields\n  inputs.forEach((input) => {\n    input.addEventListener('input', () => {\n      if (isSyncingInput) return;\n\n      isSyncingInput = true;\n      const val = input.value;\n\n      inputs.forEach((otherInput) => {\n        if (otherInput !== input) {\n          otherInput.value = val;\n          otherInput.dispatchEvent(new Event('input', { bubbles: true }));\n          otherInput.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n      });\n      isSyncingInput = false;\n    });\n  });\n\n  // Sync select fields\n  selects.forEach((select) => {\n    select.addEventListener('change', () => {\n      if (isSyncingSelect) return;\n\n      isSyncingSelect = true;\n      const val = select.value;\n\n      selects.forEach((otherSelect) => {\n        if (otherSelect !== select) {\n          otherSelect.value = val;\n          otherSelect.dispatchEvent(new Event('input', { bubbles: true }));\n          otherSelect.dispatchEvent(new Event('change', { bubbles: true }));\n        }\n      });\n      isSyncingSelect = false;\n    });\n  });\n};\n", "import { initializeFinsweetAttributes } from './utils/finsweet';\nimport { resetFilters } from './utils/resetFilters';\nimport { initializeSimpleMap } from './utils/simplemap';\nimport { populateStateDropdown } from './utils/states';\nimport { syncInputsAndSelects } from './utils/syncInputsAndSelects';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  // Wait for Webflow to fully load\n  window.addEventListener('load', function () {\n    populateStateDropdown(); // Populate the dropdown with states\n    initializeFinsweetAttributes(); // Initialize Finsweet Attributes\n    initializeSimpleMap(); // Initialize SimpleMap functionality\n    syncInputsAndSelects(); // Synchronize inputs and selects\n    resetFilters(); // Attach the SimplyMap back button event and reset filters\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
